# Reference: https://www.exclamationlabs.com/blog/continuous-deployment-to-npm-using-gitlab-ci/

# GitLab uses docker in the background, so we need to specify the 
# image versions. This is useful because we're freely to use
# multiple node versions to work with it. They come from the docker
# repo.
# Uses NodeJS V 9.4.0
image: node:11.1.0

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# And to cache them as well.
cache:
  paths:
    - node_modules/
    - .yarn

# We tell GitLab to install all the packages
# before running anything.
# Docker images come with yarn preinstalled
before_script:  
  - apt-get update -qq && apt-get install
  - git submodule sync --recursive
  - git submodule update --init --recursive

# You specify the stages. Those are the steps that GitLab will go through 
# Order matters. 
stages:
  - build
  - test

Build:
  stage: build
  only:
    - merge_requests
  tags:
    - node
  before_script: 
    # - npm install -g gulp
    - yarn config set cache-folder .yarn
    - yarn install 
    - yarn add -D semantic-ui || true
    - cd src/semantic/
    # - npm link gulp
    - gulp build
    - cd ../..
  script:
    - yarn build

Test:
  stage: test
  only:
    - merge_requests
  tags:
  - node
  before_script: 
    - yarn config set cache-folder .yarn
    - yarn install 
  script:
  # Installs Chrome
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub |  apt-key add -
    - echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' |  tee /etc/apt/sources.list.d/google-chrome.list
    - apt-get update 
    - apt-get install google-chrome-stable -y
  # Runs the tests.
    - yarn test .
